{"ast":null,"code":"var _jsxFileName = \"/Users/ericbennett/Desktop/ericlet/mandarin_trainer/src/components/Menu.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { Stack, Card, Form, Button, ButtonGroup, ToggleButton } from 'react-bootstrap';\nimport data from './dictionary.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Menu(props) {\n  _s();\n  const [given, setGiven] = useState(\"\");\n  const [want, setWant] = useState(\"\");\n  const [set, setSet] = useState(\"\");\n  const answerTypes = [{\n    name: \"Pinyin\",\n    value: \"pinyin\"\n  }, {\n    name: \"Character\",\n    value: \"character\"\n  }, {\n    name: \"Definition\",\n    value: \"definition\"\n  }];\n  return /*#__PURE__*/_jsxDEV(Card, {\n    body: true,\n    style: {\n      width: \"400px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Card.Title, {\n      children: \"Mandarin Trainer BETA\\u96F6\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Card.Body, {\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        gap: 3,\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          gap: 1,\n          children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n            \"aria-label\": \"WordSet\",\n            value: set,\n            onChange: event => setSet(event.target.value),\n            children: data.sets.map(set => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: set.setName,\n              children: set.setName\n            }, set.setName, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 33\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            children: \"Review Set\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Stack, {\n          direction: \"horizontal\",\n          gap: 3,\n          style: {\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Stack, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              style: {\n                textAlign: \"center\"\n              },\n              children: \"Given\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              vertical: true,\n              children: answerTypes.map((radio, idx) => /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: `given-${idx}`,\n                type: \"radio\",\n                name: \"given\",\n                value: radio.value,\n                checked: given === radio.value,\n                onChange: e => setGiven(e.currentTarget.value),\n                children: radio.name\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n              style: {\n                textAlign: \"center\"\n              },\n              children: \"Test for\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              vertical: true,\n              children: answerTypes.map((radio, idx) => /*#__PURE__*/_jsxDEV(ToggleButton, {\n                id: `want-${idx}`,\n                type: \"radio\",\n                name: \"want\",\n                value: radio.value,\n                checked: want === radio.value,\n                onChange: e => setWant(e.currentTarget.value),\n                children: radio.name\n              }, idx, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"success\",\n          onClick: () => {},\n          children: \"GO!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n}\n_s(Menu, \"y2shruHc2tgfwd216qhz10KRbEI=\");\n_c = Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["useState","useEffect","Stack","Card","Form","Button","ButtonGroup","ToggleButton","data","jsxDEV","_jsxDEV","Menu","props","_s","given","setGiven","want","setWant","set","setSet","answerTypes","name","value","body","style","width","children","Title","fileName","_jsxFileName","lineNumber","columnNumber","Body","gap","Select","onChange","event","target","sets","map","setName","direction","justifyContent","alignItems","textAlign","vertical","radio","idx","id","type","checked","e","currentTarget","variant","onClick","_c","$RefreshReg$"],"sources":["/Users/ericbennett/Desktop/ericlet/mandarin_trainer/src/components/Menu.js"],"sourcesContent":["import { useState, useEffect } from 'react'\nimport { Stack, Card, Form, Button, ButtonGroup, ToggleButton } from 'react-bootstrap'\nimport data from './dictionary.json'\n\nexport default function Menu(props) {\n\n    const [given, setGiven] = useState(\"\")\n    const [want, setWant] = useState(\"\")\n    const [set, setSet] = useState(\"\")\n\n\n    const answerTypes = [\n        {\n            name: \"Pinyin\",\n            value: \"pinyin\"\n        },\n        {\n            name: \"Character\",\n            value: \"character\",\n        },\n        {\n            name: \"Definition\",\n            value: \"definition\"\n        }\n    ]\n\n    return (\n        <Card body style={{ width: \"400px\" }}>\n            <Card.Title>\n                Mandarin Trainer BETAé›¶\n            </Card.Title>\n            <Card.Body>\n                <Stack gap={3}>\n\n                    <Stack gap={1}>\n                        <Form.Select aria-label=\"WordSet\" value={set} onChange={(event) => setSet(event.target.value)} >\n                            {data.sets.map((set) => (\n                                <option key={set.setName} value={set.setName}>{set.setName}</option>\n                            ))}\n                        </Form.Select>\n                        <Button>\n                            Review Set\n                        </Button>\n                    </Stack>\n\n                    <Stack direction=\"horizontal\" gap={3} style={{ justifyContent: \"space-between\", alignItems: \"center\" }}>\n\n                        <Stack>\n                            <h6 style={{ textAlign: \"center\" }}>Given</h6>\n                            <ButtonGroup vertical>\n                                {answerTypes.map((radio, idx) => (\n                                    <ToggleButton\n                                        key={idx}\n                                        id={`given-${idx}`}\n                                        type=\"radio\"\n                                        name=\"given\"\n                                        value={radio.value}\n                                        checked={given === radio.value}\n                                        onChange={(e) => setGiven(e.currentTarget.value)}\n                                    >\n                                        {radio.name}\n                                    </ToggleButton>\n                                ))}\n                            </ButtonGroup>\n                        </Stack>\n\n                        <Stack>\n                            <h6 style={{ textAlign: \"center\" }}>Test for</h6>\n                            <ButtonGroup vertical>\n                                {answerTypes.map((radio, idx) => (\n                                    <ToggleButton\n                                        key={idx}\n                                        id={`want-${idx}`}\n                                        type=\"radio\"\n                                        name=\"want\"\n                                        value={radio.value}\n                                        checked={want === radio.value}\n                                        onChange={(e) => setWant(e.currentTarget.value)}\n                                    >\n                                        {radio.name}\n                                    </ToggleButton>\n                                ))}\n                            </ButtonGroup>\n                        </Stack>\n\n                    </Stack>\n\n                    <Button variant=\"success\" onClick={() => {\n\n                    }}>\n                        GO!\n                    </Button>\n\n                </Stack>\n            </Card.Body>\n        </Card>\n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}